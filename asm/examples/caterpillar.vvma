    zero
    stsp

; clear screen
    lwv ClsStr
    arv PrintStr
    call

; fill walls
    lwv 1
    stwr w2
    lwv 80
    stwr w1
    lwv field
    arv FillWall
    call ; w2 is not clobbered
    lwv 80
    stwr w1
    lwv field + 1840 ; 80*23
    arv FillWall
    call
    lwv 80
    stwr w2
    lwv 24
    stwr w1
    lwv field
    arv FillWall
    call ; w2 is not clobbered
    lwv 24
    stwr w1
    lwv field + 79
    arv FillWall
    call

; draw walls
    zero
    arv DrwWallH
    call
    lbv 23
    arv DrwWallH
    call
    zero
    arv DrwWallV
    call
    lbv 79
    arv DrwWallV
    call

; initialize caterpillar
    arv InitCatp
    call

; setup realtime keyboard
    arv 2
    lbv 1
    out

; setup timer
    arv 3
    zero
    out ; reset timer
    arv 0
    lbv 2
    out ; reset timer
    arv 3
    lbv $30
    out

; ----------------------------------------------------------------------
;  MAIN LOOP
; ----------------------------------------------------------------------
MainLoop:
    arv 0
    lbv 2
    out ; wait

    arv NeedPkup
    lbi
    arv NextPkup
    jif lz
    cxbw
    xa
    lwv 1
    xa
    sub ; X = 1
    arv NeedPkup
    stbi
    arv NextPkup
    jif lnz
; try placing a pickup
    arv PkupY ; to multiply by 80, let's first multiply by 10
    lbi ; which we do as temp:=PkupY<<1, result:=(temp << 2) + temp
    zxbw
    zxwx
    rol
    stwr w0 ; temp
    rol
    rol
    xa
    lwr w0
    add ; PkupY * 10
    zxwx
    rol
    rol
    rol ; PkupY * 80
    xa
    arv PkupX
    lbi
    zxbw
    add ; PkupY * 80 + PkupX
    xa
    lwv field
    add ; A = pickup address = field + PkupY * 80 + PkupX
    stwr w0 ; w0 = pickup address
    ara
    lbi ; read from position
    arv MakePkup
    jif lz ; free to place
    lbv 1
    arv NeedPkup
    stwi ; reschedule on next step
    arv NextPkup
    jmp
MakePkup:
    lbv $80
    arwr w0
    stbi ; write to the field
    arv PkupX
    lbi
    stbr b0
    arv PkupY
    lbi
    stbr b2
    arv SetCurXY
    call
    arv 1
    lbv '@'
    out ; draw on the screen
NextPkup:
    ; update PkupX
    arv PkupX
    lbi
    xa
    lbv $5F
    add
    xa
    arv CatpHX
    lbi ; we only care about the low byte anyway
    xor
    ror
    xa
    lbv 63
    and
    xa
    lbv 8
    add
    arv PkupX
    stbi
    ; update PkupY
    arv PkupY
    lbi
    xa
    lbv 1
    add
    xa
    arv CatpHY
    lbi ; we only care about the low byte anyway
    xor
    xa
    lbv 15
    and
    xa
    lbv 4
    add
    arv PkupY
    stbi

ReadKey:
    lwv 1
    ara
    in
    stbr b0
    xa
    lbv 'l'
    sub
    arv PressedR
    jif lz
    lbr b0
    xa
    lbv 'k'
    sub
    arv PressedD
    jif lz
    lbr b0
    xa
    lbv 'j'
    sub
    arv PressedL
    jif lz
    lbr b0
    xa
    lbv 'i'
    sub
    arv PressedU
    jif lz
    arv SkipKey
    ;arv ReadKey ; use to wait for each key during debugging
    jmp
PressedR:
    lbv 1
    arv StoreDir
    jmp
PressedD:
    lbv 3
    arv StoreDir
    jmp
PressedL:
    lbv 5
    arv StoreDir
    jmp
PressedU:
    lbv 7
StoreDir:
    arv CatpDir
    stbi

SkipKey:
; move caterpillar head
    ; draw body over head's position
    arv CatpHX
    lbi
    stbr b0
    arv CatpHY
    lbi
    stbr b2
    arv SetCurXY
    call
    arv 1
    lbv '#'
    out
    ; store new body byte
    arv CatpDir
    lbi ; L = field byte
    cxwx ; X = field byte
    arv CatpHptr
    lwi ; A = Hptr
    ara
    xa
    stbi ; store new body byte
    ; process direction
    arv CatpDir
    lwi
    ror
    xa
    lwv 3
    and
    cxwx
    add
    stwr w3 ; backup direction*2 in W3
    ; Update CatpHptr
    xa
    lwv Dir2Offs
    add ; A = Dir2Offs + dir*2
    ara
    lwi ; A = [Dir2Offs + dir*2] = ptroffs
    xa
    arv CatpHptr
    lwi
    add
    stwi ; [CatpHptr] = updated
    ; Update CatpHX
    lwr w3 ; w3 = dir bits
    xa
    lwv Dir2Dx
    add
    ara
    lwi ; A = dx
    xa
    arv CatpHX
    lwi
    add
    stwi ; updated CatpHX
    ; Update CatpHY
    lwr w3 ; w3 = dir bits
    xa
    lwv Dir2Dy
    add
    ara
    lwi ; A = dy
    xa
    arv CatpHY
    lwi
    add
    stwi ; updated CatpHY
    ; draw new head, L already contains x pos
    stbr b2
    arv CatpHX
    lwi
    stbr b0
    arv SetCurXY
    call
    arv 1
    lbv 'O'
    out
; check for bump
    arv CatpHptr
    lwi
    ara
    lbi
    stbr b0
    xa
    lbv 1
    and
    arv KaBoom
    jif lnz
; check for pickups
    lbr b0
    zxbw
    rol
    arv MoveTail
    jif hz
    ; ate pickup
    lbv 3
    arv NeedPkup
    stbi
    lbv 4
    arv Grow
    stbi

; move caterpillar tail
MoveTail:
    lbv 1
    xa
    arv Grow
    lbi
    arv NoGrow
    jif lz
    zxbw
    sub ; X = 1
    arv Grow
    stbi
    arv SkipTail
    jmp
NoGrow:
    ; erase tail on the screen
    arv CatpTX
    lwi
    stbr b0
    arv CatpTY
    lwi
    stbr b2
    arv SetCurXY
    call
    arv 1
    lbv 32
    out ; erase tail
    ; erase tail in the field
    arv CatpTptr
    lwi
    ara
    lbi ; tail field byte
    ror
    xa
    lwv 3
    and ; A = tail direction
    cxwx
    add ; A = dir*2
    stwr w3 ; store tail direction index*2 in W3
    zero
    stbi ; erase tail (ADDR still untouched)
    ; update TailHptr
    lwr w3
    xa
    lwv Dir2Offs
    add ; A = Dir2Offs + dir*2
    ara
    lwi ; A = [Dir2Offs + dir*2] = ptroffs
    xa
    arv CatpTptr
    lwi
    add
    stwi ; [CatpTptr] = updated
    ; Update CatpTX
    lwr w3 ; w3 = dir bits
    xa
    lwv Dir2Dx
    add
    ara
    lwi ; A = dx
    xa
    arv CatpTX
    lwi
    add
    stwi ; updated CatpTX
    ; Update CatpTY
    lwr w3 ; w3 = dir bits
    xa
    lwv Dir2Dy
    add
    ara
    lwi ; A = dy
    xa
    arv CatpTY
    lwi
    add
    stwi ; updated CatpTY

SkipTail:
    arv MainLoop
    jmp

    zero
    ara
    out


ClsStr: ; cls string
    .db $1B
    .ds '[2J'
    .db 0

KaBoomSt:
    .db $1B
    .ds '[13;38f'
    .ds 'KABOOM!'
    .db 0

KaBoom:
    lwv KaBoomSt
    arv PrintStr
    call
    zero
    ara
    out

; Direction translation
Dir2Dx:
    .dw 1
    .dw 0
    .dw -1
    .dw 0
Dir2Dy:
    .dw 0
    .dw 1
    .dw 0
    .dw -1
Dir2Offs:
    .dw 1
    .dw 80
    .dw -1
    .dw -80

; The values must be synced with InitCatp
CatpHptr: .dw field + 960 + 40
CatpTptr: .dw field + 960 + 44
CatpHX: .dw 40
CatpHY: .dw 12
CatpTX: .dw 44
CatpTY: .dw 12
CatpDir: .db 5 ; value to store in the field, 00000101 = left
CatpDX: .dw -1
CatpDY: .dw 0
NeedPkup: .db 3
PkupX: .db 50
PkupY: .db 10
Grow:  .db 0

; Initialize the caterpillar visually and in the field
; The position must match Catp... initial values
InitCatp:
    lwv field + 960 + 41; 80*12 = 960
    stwr w0
    lbv 5 ; left direction = 101
    stbr b2
    lwv 4 ; count
    stwr w2
InitCtpA:
    lwr w0
    ara
    xa
    lwv 1
    add
    stwr w0
    lbr b2
    stbi ; ADDR is still unchanged by W0 increment
    lwv 1
    xa
    lwr w2
    sub
    stwr w2
    arv InitCtpA
    jif nz
    ; now that we filled the data, let's draw the characters
    lbv 40
    stbr b0
    lbv 12
    stbr b2
    arv SetCurXY
    call
    lwv 1
    ara
    lbv 'O'
    out
    ; drawing the tail
    lwv 4 ; count
    stwr w2
InitCtpD:
    lwv 1
    ara
    lbv '#'
    out
    lwv 1
    xa
    lwr w2
    sub
    stwr w2
    arv InitCtpD
    jif nz
    ret


; Fills a wall. A = starting ptr in field. W1=count, W2=ptr step. Clobbers W0, W1
FillWall:
    stwr w0 ; w0 = ptr
FillWlla:
    lwr w0
    ara
    lbv 7 ; wall bits
    stbi
    lwr w0
    xa
    lwr w2
    add
    stwr w0
    lwv 1
    xa
    lwr w1
    sub
    stwr w1
    arv FillWlla
    jif lnz
    ret

; Draws horizontal wall. A = vertical pos. Clobbers all registers
DrwWallH:
    stbr b2
    zero
    stbr b0
    arv SetCurXY
    call
    lbv '#'
    stbr b0 ; fill char
    lwv 80
    stwr w1 ; count
DrwWllHa:
    arv 1
    lbr b0
    out
    lwv 1
    xa
    lwr w1
    sub
    stwr w1
    arv DrwWllHa
    jif lnz
    ret

; Draws vertical wall. A = horizontal pos. Clobbers all registers
DrwWallV:
    stbr b0
    zero
    stbr b2
    arv SetCurXY
    call
    lbv '#'
    stbr b0 ; fill char
    lwv 24 ; count
    arv DrwWllVc
    stwi
DrwWllVa:
    arv 1
    lbr b0
    out
    lwv 1
    xa
    arv DrwWllVc
    lwi
    sub
    stwi
    arv DrwWllVe
    jif lz
    lwv CursorLD
    arv PrintStr
    call
    arv DrwWllVa
    jmp
DrwWllVe:
    ret
DrwWllVc: .dw 0

CursorLD: ; cursor left and down
    .db $1B
    .ds '[D'
    .db $1B
    .ds '[B'
    .db 0

; Set cursor position. b0=X, b2=Y. Clobbers all registers
; -------------------------------------------------------
SetCurXY:
    lbr b0
    arv SetCurX
    stwi
    lwv SetCurS+2
    stwr w0
    lbr b2 ; A = Y, W0 = SetCurS+2
    xa
    lbv 1
    add ; make 1-based
    arv Prnt2d10
    call ; W0 = incremented ptr
    lwr w0
    ara
    lbv ';'
    stbi
    lwr w0
    xa
    lwv 1
    add ; A = ptr+1
    stwr w0
    arv SetCurX
    lbi ; A = X, W0 = ptr
    xa
    lbv 1
    add ; make 1-based
    arv Prnt2d10
    call ; W0 = incremented ptr
    lwr w0
    ara
    lbv 'f'
    stbi
    lwr w0
    xa
    lwv 1
    add
    ara
    zero
    stbi
    lwv SetCurS
    arv PrintStr
    jmp
SetCurX:
    .dw 0
SetCurS:
    .db $1B
    .ds '[00;00f'
    .db 0


; Print a 2-digit (up to 99) decimal number in L to [W0]
; incrementing W0 by 1 or 2. Clamps the input to 99 for safety.
; Returns updated W0. Clobbers all other regs
; --------------------------------------------------------------
Prnt2d10:
    zxbw
    stwr w1
    xa
    lwv 100
    xa
    sub ; XA = num-100
    arv Prnt2d1r
    jif nz
    lwv 99  ; clamp to 99
    stwr w1
Prnt2d1r:
    lwr w1
    arv Prnt2d1n
    stwi ; [Prnt2d1n]=number
    stwr w1 ; w1 = number
    arv Prnt2d1p
    lwr w0
    stwi ; [Prnt2d1p]=W0
    lwv 10
    xa
    lwr w1
    sub
    arv Prnt2d1b
    jif xnz ; 1 digit only
    lwr w1
    arv Div2d10
    call ; W3 = div, W0 = rest
    lwr w0
    stwr w1 ; W1 = rest
    arv Prnt2d1p
    lwi
    stwr w2
    ara
    lbr b6 ; lob(W3)
    xa
    lbv '0'
    add
    stbi ; [[Prnt2d1p]]=decimal char
    lwr w2
    xa
    lwv 1
    add
    arv Prnt2d1p
    stwi ; [Prnt2d1p]++
Prnt2d1b: ; W1 = number or rest
    lwr w1
    xa
    lbv '0'
    add
    xa ; X = decimal char
    arv Prnt2d1p
    lwi
    stwr w2
    ara
    xa
    stbi ; [[Prnt2d1p]]=decimal char
    lwr w2
    xa
    lwv 1
    add
    stwr w0
    ret

Prnt2d1n:   .dw 0
Prnt2d1p:   .dw 0

; Divide a 2-digit decimal number (actually up to 159) in L by 10
; Result in W3, Rest in W0. Clobbers all regs
; ---------------------------------------------------------------
Div2d10:
    zxbw    ; make sure we also handle byte inputs
    stwr w0 ; w0 = long division source accumulator
    lbv 80  ; use LBV since H is already 0 anyway
    stwr w1 ; w1 = shifted divider
    lbv 8
    stwr w2 ; w2 = result bit
    zero
    stwr w3 ; w3 = result accumulator
Div2d10l:
    lwr w1
    xa
    lwr w0  ; A = source accum, X = shifted divider
    sub
    arv Div2d10s
    jif xnz
    stwr w0 ; store subtraction result back
    lwr w2
    xa
    lwr w3
    add
    stwr w3 ; add to result
Div2d10s:
    lwr w1
    zxwx
    ror
    stwr w1 ; divider >>= 1
    lwr w2
    ror ; no need to zero X, most of its bits are still zero
    arv Div2d10e
    jif z
    stwr w2 ; result bit >>= 1
    arv Div2d10l
    jmp
Div2d10e:
    ret


; Print Hex Word. Value to print is in A, clobber W0,W1
; -----------------------------------------------------
PrntHexW:
    stwr w1
    xhl
    arv PrntHexB
    call
    lwr w1
    arv PrntHexB
    call
    ret

; Print Hex Byte. Value to print is in A, clobber W0
; --------------------------------------------------
PrntHexB:
    zxbw
    stwr w0
    ror
    ror
    ror
    ror
    arv PrntHexN
    call
    lwr w0
    arv PrntHexN
    call
    ret

; Print Hex Nibble. Value to print is in lowest 4 bits of A
; ---------------------------------------------------------
PrntHexN:
    xa
    lwv $F
    and ; [A] = nibble
    xa ; nibble in X
    lwv 10
    xa
    sub
    arv PrntHxNA
    jif xz
    xa
    lwv '0'+10 ; add 10 back
    add
    arv 1
    out
    ret
PrntHxNA: ; A..F ([A] = nibble-10, clobber X,ADDR)
    xa
    lwv 'A'
    add
    arv 1
    out
    ret

; Print zero-terminated string pointed to by A. Clobbers W1, W0
; -------------------------------------------------------------
PrintStr:
    stwr w1 ; W1 = running_ptr
    ara
    lbi
    arv PrintStx
    jif lz
    arv 1
    out
    lwr w1 ; A = running_ptr
    cxwx ; X = running_ptr
    lwv 1 ; A = 1
    add ; A = ++running ptr
    arv PrintStr
    jmp
PrintStx:
    ret

; body: 000000dd1 = tail
;       dd bits point to next segmemt: 00 = right, 01 = down, 10 = left, 11 = up
;       head does not use any specific value
; wall: 00000xx1  (xx bits can be anything)
; empty:  00000000
; pickup: 10000000
; size 80x24
field: .rep (1920) .db 0

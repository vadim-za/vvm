; This file is used for conceptual testing of the instruction set
; by writing (untested) implementations of some common tasks

; This file might be a bit out of date, use the .MD doc files!

; ------------- unsigned word comparisons
; unsigned if(w0 >= w1)
    lwr w1
    xa
    lwr w0
    sub ; (X:A)=W0-W1
    arv Skip
    jif xnz ; if(w0 < w1)
    ; We get here if(w0 >= w1)
    ...
Skip:

; unsigned if(w0 < w1)
    lwr w1
    xa
    lwr w0
    sub ; (X:A)=W0-W1
    arv Skip
    jif xz ; if(w0 >= w1)
    ; We get here if(w0 < w1)
    ...
Skip:

; unsigned if(w0 > w1)
; it is more efficient to check if(w1 < w0)
; but we do it for the sake of exercise anyway
    lwr w1
    xa
    lwr w0
    sub ; (X:A)=W0-W1
    arv Skip
    jif xnz ; if(w0 < w1)
    jif z ; if(w0 == w1)
    ; We get here if(w0 > w1)
    ...
Skip:

; unsigned if(w0 <= w1)
; it is more efficient to check if(w1 >= w0)
; but we do it for the sake of exercise anyway
    lwr w1
    xa
    lwr w0
    sub ; (X:A)=W0-W1
    arv True
    jif xnz ; if(w0 < w1)
    arv Skip
    jif nz ; if(w0 != w1)
True:
    ; We get here if(w0 <= w1)
    ...
Skip:

; ------------- signed word comparisons
; signed if(w0 >= w1)
    lwr w1
    xa
    lwr w0
    xor
    sxwx
    arv SameSign
    jif xz
    lwr w0
    sxwx
    arv True
    jifxz ; w0 >= 0, w1 < 0
    arv Skip
    jmp
SameSign:
    lwr w1
    xa
    lwr w0
    sub ; (X:A)=W0-W1
    arv Skip
    jif xnz ; if(w0 < w1)
True:
    ; We get here if(w0 >= w1)
    ...
Skip:

; ------------- unsigned byte comparisons
; unsigned if(b0 >= b1)         8080: unsigned if(B >= C)
    lbr b1                          MOV A,B
    zxbw                            CMP C
    xa                              JC SKIP
    lbr b0
    zxbw
    sub
    arv Skip
    jif hnz ; if(b0 < b1)
True:
    ; We get here if(b0 >= b1)
    ...
Skip:

; ------------- signed byte comparisons
; signed if(b0 >= b1)               8080: signed if(B >= C)
    lbr b1                              MOV A,B
    xa                                  XRA C
    lbr b0                              JP SameSign
    xor                                 MOV A,B
    sxbw ; MSB(A)=xor of signs          ORA A
    arv SameSign                        JP True ; B >= 0, C < 0
    jif hz                              JMP Skip
    lbr b0                          SameSign:
    sxbw                                MOV A,B
    arv True                            SUB C
    jifhz True ; b0 >= 0, b1 < 0        JM Skip
    arv Skip
    jmp                            
SameSign:
    lbr b1
    sxbw
    xa
    lbr b0
    sxbw
    sub
    arv Skip
    jif hnz ; if(b0 < b1)
True:
    ; We get here if(b0 >= b1)
    ...
Skip:

; ------------- shifts and rotations
; shift left A
    zxwx
    rol

; shift right A
    zxwx
    ror

; shift right LSB(A)
    zxbw
    rol

; arithmetic shift right A
    sxwx
    ror

; arithmetic shift right LSB(A)
    sxbw
    sxwx
    ror

; rotate right A
    cxwx
    ror

; rotate left A
    cxwx
    rol

; rotate right LSB(A)
    cxbw
    ror

; rotate left LSB(A)
    cxbw
    rol

; shift right two connected bytes b1:b0
    lbr b1
    zxbw
    ror ; bit31 = carry
    stbr b1
    rol ; bit0 = carry
    cxbw ; bit8 = carry
    lbr b0
    ror ; shift in carry
    stbr b0

; ------------- carry arithmetic
; add two 32-bit numbers w1:w0 and w3:w2 storing in w1:w0
    lwr w0
    xa
    lwr w2
    add ; (x:a) = w0+w2
    stwr w0 ; w0 = w0+w2, x = carry  (carry = 1 or 0)
    lwr w1
    add ; (x:a) = carry + w1
    xa
    lwr w3
    add ; (x:a) = carry + w1 + w3
    stwr w1

; subtract two 32-bit numbers (w1:w0)-(w3:w2) storing in w1:w0
    lwr w0
    xa
    lwr w2
    sub ; (x:a) = w0-w2
    stwr w0 ; w0 = w0-w2, x = carry  (carry = -1 or 0)
    lwr w1
    add ; (x:a) = carry + w1
    xa
    lwr w3
    sub ; (x:a) = carry + w1 - w3
    stwr w1

; add two 16-bit numbers b1:b0 and b3:b2 storing in b1:b0
    lbr b0
    zxbw
    xa
    lbr b2
    zxbw
    add ; (x:a) = b0+b2
    stbr b0
    xhl ; LSB(A) = carry
    zxbw ; A = carry
    xa ; X = carry
    lbr b1
    add ; (x:a) = carry + b1
    xa
    lbr b3
    add ; (x:a) = carry + b1 + b3
    stwr b1

; -----------------------------

    ; w0 = call address for OS
    lwr w0
    arv Exit+1
    stwi

    lwv Hello
    stwr w2 ; w2 = ptr
Loop:
    arwr w2
    lbi
    arv Exit
    jif lz
    arv 0 ; conout
    out
    lwv 1
    xa
    lwr w2
    add ; w2 = w2+1
    stwr w2
    arv Loop
    jmp
Exit:
    arv 0
    lwv 0
    jmp

Hello:  db 'Hello world!',0
